{
  "name": "coinkey",
  "version": "0.1.0",
  "description": "JavaScript component for private keys, public keys, and addresess for crypto currencies such as Bitcoin, Litecoin, and Dogecoin",
  "keywords": [
    "cryptography",
    "crypto",
    "bitcoin",
    "litecoin",
    "elliptical",
    "curve"
  ],
  "devDependencies": {
    "mocha": "1.*",
    "terst": "~0.1.0",
    "binstring": "~0.2.0"
  },
  "repository": {
    "url": "https://github.com/cryptocoinjs/coinkey",
    "type": "git"
  },
  "main": "./lib/coinkey.js",
  "dependencies": {
    "coinstring": "~0.2.0",
    "eckey": "~0.4.0",
    "secure-random": "~0.2.0"
  },
  "readme": "coinkey\n=======\n\nJavaScript component for private keys, public keys, and addresess for crypto currencies such as Bitcoin, Litecoin, and Dogecoin.\n\n\nWhy?\n----\n\nThis module provides a convenient way to compute all of the relevant crypto currency details of private keys, public keys, and addresses. It inherits from [ECKey][eckey] and adds the utility of [coinstring][coinstring]. \n\n\nInstallation\n------------\n\n    npm install --save coinkey\n\n\nUsage\n-----\n\n### Common Use Cases\n\n### Generate a Bunch of Bitcoin Keys/Addresses\n\n```js\nvar CoinKey = require('coinkey');\n\nvar bitcoinAddresses = [];\n\nfor (var i = 0; i < 10; ++i) {\n  bitcoinAddresses.push(new CoinKey()); //Bitcoin supported by default\n}\n```\n\n\n#### Generate a Bunch of Namecoin Keys/Addresses\n\n```js\nvar CoinKey = require('coinkey');\nvar ci = require('coininfo');\n\nvar namecoins = [];\nfor (var i = 0; i < 10; ++i) {\n  namecoins.push(new CoinKey(ci('NMC').versions));\n}\n```\n\n\n#### Parse a Wallet Import Key and Determine Crypto Currency\n\n```js\nvar CoinKey = require('coinkey');\nvar ci = require('coininfo');\n\nvar ck = CoinKey.fromWif('QVD3x1RPiWPvyxbTsfxVwaYLyeBZrQvjhZ2aZJUsbuRgsEAGpNQ2');\n\nconsole.log(ck.privateKey.toString('hex')) // => c4bbcb1fbec99d65bf59d85c8cb62ee2db963f0fe106f483d9afa73bd4e39a8a\nconsole.log(ck.publicAddress) // => DGG6AicS4Qg8Y3UFtcuwJqbuRZ3Q7WtYXv\nconsole.log(ck.compressed) // => true\nconsole.log(ck.versions.public === ci('DOGE').versions.public) // => true\n```\n\n#### Change to Testnet Later\n\n```js\nvar CoinKey = require('coinkey');\nvar ci = require('coininfo');\n\nvar ck = new CoinKey(new Buffer('1184cd2cdd640ca42cfc3a091c51d549b2f016d454b2774019c2b2d2e08529fd', 'hex'));\nconsole.log(ck.publicAddress); // => 16UjcYNBG9GTK4uq2f7yYEbuifqCzoLMGS\n\n//change to Testnet\nck.versions = ci('TEST');\n\nconsole.log(ck.publicAddress); // => mkzgubTA5Ahi6BPSkE6MN9pEafRutznkMe\n```\n\n\n### API\n\n#### CoinKey([bytes], [compressed], [versions])\n\nConstructor function.\n\n- **bytes**: The private key bytes. Must be 32 bytes in length. Should be an `Array`, `Uint8Array`, or a `Buffer`. If not passed, one will be randomlyl generated.\n- **compressed**: Specify whether the key should be compressed or not.\n- **versions**: An object that specifies the public and private key versions for addresses and wifs. Defaults to Bitcoin `mainnet`.\n\n```js\nvar CoinKey = require('coinkey');\nvar secureRandom = require('secure-random'); \n\nvar bytes = secureRandom(32); //https://github.com/jprichardson/secure-random\nvar key1 = new ECKey(bytes);\nvar key2 = CoinKey(bytes); //<--- can also use without \"new\"\nvar compressedKey = new CoinKey(bytes, true);\n```\n\n\n### Properties\n\n\n#### compressed\n\nInherited from [ECKey][eckey]. [eckey.compressed](https://github.com/cryptocoinjs/eckey#compressed)\n\n\n#### privateKey\n\nInherited from [ECKey][eckey]. [eckey.privateKey](https://github.com/cryptocoinjs/eckey#privatekey)\n\n\n#### privateExportKey\n\nInherited from [ECKey][eckey]. [eckey.privateExportKey](https://github.com/cryptocoinjs/eckey#privateexportkey)\n\n\n#### privateWif\n\nGet the private WIF (Wallet Import Format).\n\n```js\nvar CoinKey = require('coinkey');\nvar conv = require('binstring');\n\nvar privateKeyHex = \"1184cd2cdd640ca42cfc3a091c51d549b2f016d454b2774019c2b2d2e08529fd\";\n\n//Bitcoin WIF\nvar key = new CoinKey(conv(privateKeyHex, {in: 'hex', out: 'buffer'}), false);\nconsole.log(key.privateWif) // => 5Hx15HFGyep2CfPxsJKe2fXJsCVn5DEiyoeGGF6JZjGbTRnqfiD\n\n//Litecoin WIF\nvar key = new CoinKey(conv(privateKeyHex, {in: 'hex', out: 'buffer'}), false, {private: 0xB0, public: 0x30});\nconsole.log(key.privateWif) // => 6uFjYQnot5Gtg3HpP87bp4JUpg4FH1gkkV3RyS7LHBbD9Hpt1na\n```\n\n\n#### publicKey\n\nInherited from [ECKey][eckey]. [eckey.publicKey](https://github.com/cryptocoinjs/eckey#publickey)\n\n\n#### publicAddress\n\nGet the public address.\n\n```js\nvar CoinKey = require('coinkey');\nvar conv = require('binstring');\n\nvar privateKeyHex = \"1184cd2cdd640ca42cfc3a091c51d549b2f016d454b2774019c2b2d2e08529fd\";\n\n//Bitcoin Address\nvar key = new CoinKey(conv(privateKeyHex, {in: 'hex', out: 'buffer'}), false);\nconsole.log(key.publicAddress) // => 16UjcYNBG9GTK4uq2f7yYEbuifqCzoLMGS\n\n//Litecoin Address\nvar key = new CoinKey(conv(privateKeyHex, {in: 'hex', out: 'buffer'}), false, {private: 0xB0, public: 0x30});\nconsole.log(key.publicAddress) // => 16UjcYNBG9GTK4uq2f7yYEbuifqCzoLMGS\n```\n\n\n#### publicHash\n\nAlias: `pubKeyHash`\n\nGet the public hash i.e. the ripemd160(sha256(publicKey))\n\n```js\nvar CoinKey = require('coinkey');\nvar conv = require('binstring');\n\nvar privateKeyHex = \"1184cd2cdd640ca42cfc3a091c51d549b2f016d454b2774019c2b2d2e08529fd\";\n\nvar key = new CoinKey(conv(privateKeyHex, {in: 'hex', out: 'buffer'}), false);\nconsole.log(key.publicHash.toString('hex')) // => 3c176e659bea0f29a3e9bf7880c112b1b31b4dc8\nconsole.log(key.publKeyHash.toString('hex')) // => 3c176e659bea0f29a3e9bf7880c112b1b31b4dc8\n\nvar keyCompressed = CoinKey(conv(privateKeyHex, {in: 'hex', out: 'buffer'}), true);\nconsole.log(key.publicHash.toString('hex')) // => a1c2f92a9dacbd2991c3897724a93f338e44bdc1\nconsole.log(key.publKeyHash.toString('hex')) // => a1c2f92a9dacbd2991c3897724a93f338e44bdc1\n```\n\n\n#### publicPoint\n\nInherited from [ECKey][eckey]. [eckey.publicPoint](https://github.com/cryptocoinjs/eckey#publicpoint)\n\n\n#### toString()\n\nReturns the string representation of the private key.\n\n\n### Methods\n\n#### fromWif(wif, [versions])\n\nClass method to create a `CoinKey` from a wif.\n\n```js\nvar ck = CoinKey.fromWif('KwomKti1X3tYJUUMb1TGSM2mrZk1wb1aHisUNHCQXTZq5auC2qc3');\nconsole.log(ck.compressed); // => true\nconsole.log(ck.privateKey.toString('hex')) // => 1184cd2cdd640ca42cfc3a091c51d549b2f016d454b2774019c2b2d2e08529fd\nconsole.log(ck.publicAddress); // => 1FkKMsKNJqWSDvTvETqcCeHcUQQ64kSC6s\n```\n\n\nBrowser Support\n---------------\n\nClone the repo:\n\n    git clone https://github.com/cryptocoinjs/coinkey\n\nInstall Browserify\n\n    npm install -g browserify\n\nNav to repo:\n\n    cd coinkey\n\nInstall dependencies:\n\n    npm install\n\nRun browserify:\n\n    browserify --standalone coinkey < lib/coinkey.js > lib/coinkey.bundle.js\n\nYou can now drop `coinkey.bundle.js` in a `<script>` tag.\n\n\n\nReferences\n----------\n- http://procbits.com/2013/08/27/generating-a-bitcoin-address-with-javascript\n- https://github.com/bitcoinjs/bitcoinjs-lib/blob/master/src/eckey.js\n- https://github.com/vbuterin/bitcoinjs-lib/blob/master/src/eckey.js\n\n\n[eckey]: https://github.com/cryptocoinjs/eckey\n[coinstring]: https://github.com/cryptocoinjs/coinstring\n\n\n\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cryptocoinjs/coinkey/issues"
  },
  "homepage": "https://github.com/cryptocoinjs/coinkey",
  "_id": "coinkey@0.1.0",
  "_shasum": "bdf2a953dcfe4fd70fdba3000c787ff369d8294c",
  "_from": "coinkey@",
  "_resolved": "https://registry.npmjs.org/coinkey/-/coinkey-0.1.0.tgz"
}
