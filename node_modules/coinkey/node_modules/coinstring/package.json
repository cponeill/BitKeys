{
  "name": "coinstring",
  "version": "0.2.0",
  "description": "Create and parse crypto currency addresses and wallet import formats.",
  "keywords": [
    "cryptography",
    "crypto",
    "bitcoin",
    "litecoin",
    "dogecoin",
    "currency",
    "cryptocurrency",
    "address",
    "wif"
  ],
  "devDependencies": {
    "mocha": "1.*",
    "terst": "~0.1.0",
    "binstring": "~0.2.0",
    "mochify": "~0.4.2"
  },
  "repository": {
    "url": "https://github.com/cryptocoinjs/coinstring",
    "type": "git"
  },
  "main": "./lib/coinstring.js",
  "dependencies": {
    "bs58": "0.3.x",
    "crypto-hashing": "~0.3.0"
  },
  "readme": "coinstring\n==========\n\ncoinstring is a JavaScript component that is fully compatible with Node.js and the browser. It's used to generate relevant addresses and wallet import formats used by various crypto currencies.\n\n**Note:** It's an experimental functional replacement for https://github.com/cryptocoinjs/btc-address\n\n\nInstallation\n------------\n\n    npm install coinstring --save\n\n\nUsage\n-----\n\nThere are three functions in this module.\n\n### API\n\n#### coinstring(version, bytes)\n\nUsed to convert either a hash160 or private key into an address or wallet import format string respectively.\n\n- **version**: Is an integer representing the version. See below for more information.\n- **bytes**: A `Buffer`, `Array`, or `Uint8Array` of bytes, either the hash160 or private key.\n\n\n#### decode([version], str)\n\nIt is the inverse of the `coinstring()` function i.e. it converts the address or wallet import format into a `Buffer` of bytes. It\nthrows if the address or wallet import format is not valid. Not valid means that the version doesn't match, or the checksum is\nincorrect. Returns an object with the follow properites `version` and `bytes`.\n\n- **version**: Is an integer representing the version. See below for more information.\n- **str**: A `string` that is either the wallet import format or public address.\n\n\n#### validate(version, str)\n\nValidates whether the address string or wallet import format string is valid. Returns a `true` or `false`.\n\n- **version**: Is an integer representing the version. See below for more information.\n- **str**: A `string` that is either the wallet import format or public address.\n\n\n\n### Common Examples\n\n#### Convert Private Key to Bitcoin Wallet Import Format\n\n```js\nvar conv = require('binstring');\nvar coinstring = require('coinstring');\n\nvar privateKeyHex = \"1184cd2cdd640ca42cfc3a091c51d549b2f016d454b2774019c2b2d2e08529fd\";\nvar privateKeyHexBuf = conv(privateKeyHex, {in: 'hex', out: 'buffer'});\nvar version = 0x080; //Bitcoin private key\n\nconsole.log(coinstring(version, privateKeyHexBuf)); // => 5Hx15HFGyep2CfPxsJKe2fXJsCVn5DEiyoeGGF6JZjGbTRnqfiD\n```\n\n#### Convert hash160 (aka pubkeyhash) to Bitcoin Address\n\n```js\nvar conv = require('binstring');\nvar coinstring = require('coinstring');\n\nvar hash160 = \"3c176e659bea0f29a3e9bf7880c112b1b31b4dc8\"; //hash representing uncompressed\nvar hash160Buf = conv(hash160, {in: 'hex', out: 'buffer'});\nvar version = 0x00; //Bitcoin public address\n\nconsole.log(coinstring(version, hash160Buf)); // => 16UjcYNBG9GTK4uq2f7yYEbuifqCzoLMGS\n```\n\n#### Convert Private Key to Compressed Bitcoin Wallet Import Format\n\n```js\nvar conv = require('binstring');\nvar coinstring = require('coinstring');\n\nvar privateKeyHex = \"1184cd2cdd640ca42cfc3a091c51d549b2f016d454b2774019c2b2d2e08529fd\";\n\n//for compressed, append \"01\"\nprivateKeyHex += '01';\n\nvar privateKeyHexBuf = conv(privateKeyHex, {in: 'hex', out: 'buffer'});\nvar version = 0x080; //Bitcoin private key\n\nconsole.log(coinstring(version, privateKeyHexBuf)); // => KwomKti1X3tYJUUMb1TGSM2mrZk1wb1aHisUNHCQXTZq5auC2qc3\n```\n\n#### Convert hash160 (aka pubkeyhash) to Dogecoin Address\n\n```js\nvar conv = require('binstring');\nvar coinstring = require('coinstring');\n\nvar hash160 = \"3c176e659bea0f29a3e9bf7880c112b1b31b4dc8\"; //hash representing uncompressed\nvar hash160Buf = conv(hash160, {in: 'hex', out: 'buffer'});\nvar version = 0x1E; //Dogecoin public address\n\nconsole.log(coinstring(version, hash160Buf)); // => DAcq9oJpZZAjr56RmF7Y5zmWboZWQ4HAsW\n```\n\n\n\n### Functional Goodies\n\n`coinstring` also has some functional goodies. All functions can be partially applied.\n\n#### Function to Generate Bitcoin Wallet Import Format\n\n```js\nvar conv = require('binstring');\nvar coinstring = require('coinstring');\n\nvar privateKeyHex = \"1184cd2cdd640ca42cfc3a091c51d549b2f016d454b2774019c2b2d2e08529fd\";\nvar privateKeyHexBuf = conv(privateKeyHex, {in: 'hex', out: 'buffer'});\nvar version = 0x080; //Bitcoin private key\n\nvar toBtcWif = coinstring(version)\n\n//later in your program\nconsole.log(toBtcWif(privateKeyHexBuf)); // => 5Hx15HFGyep2CfPxsJKe2fXJsCVn5DEiyoeGGF6JZjGbTRnqfiD\n```\n\n#### Function to Parse Bitcoin Wallet Import Format\n\n```js\nvar conv = require('binstring');\nvar coinstring = require('coinstring');\n\nvar wif = \"5Hx15HFGyep2CfPxsJKe2fXJsCVn5DEiyoeGGF6JZjGbTRnqfiD\";\nvar version = 0x080; //Bitcoin private key\n\nvar fromBtcWif = coinstring.decode(version)\n\n//later in your program\nconsole.log(fromBtcWif(wif).bytes.toString('hex')); // => 51184cd2cdd640ca42cfc3a091c51d549b2f016d454b2774019c2b2d2e08529fd\n```\n\n#### Function to Validate Bitcoin Testnet Addresses\n\n```js\nvar conv = require('binstring');\nvar coinstring = require('coinstring');\n\nvar hash160 = \"3c176e659bea0f29a3e9bf7880c112b1b31b4dc8\"; //hash representing uncompressed\nvar hash160Buf = conv(hash160, {in: 'hex', out: 'buffer'});\nvar version = 0x6F; //Bitcoin Testnet Address\n\nvar testnetAddressValidator = coinstring.validate(version);\n\nconsole.log(testnetAddressValidator(\"mkzgubTA5Ahi6BPSkE6MN9pEafRutznkMe\")) // => true\n```\n\n\n### List of Common Crypto Currency Versions\n\nThe following is a table of common crypto currency versions. It may seem a bit user unfriendly to have to input the number instead of something like \"BTC\"; we agree. Another module will be created to address this. In the meantime, use the table below.\n\n<table>\n<tr><th>Crypto Coin</th><th>Public Address</th><th>Private Wallet Import Format</th></tr>\n<tr><td>Bitcoin</td><td> 0x00</td><td> 0x80</td></tr>\n<tr><td>Bitcoin Script Hash</td><td> 0x05</td><td> N/A</td></tr>\n<tr><td>Bitcoin Testnet</td><td> 0x6E</td><td> 0xEF</td></tr>\n<tr><td>Bitcoin Testnet Script Hash</td><td> 0xC4</td><td> N/A</td></tr>\n<tr><td>Dogecoin</td><td> 0x1E</td><td> 0x9E</td></tr>\n<tr><td>Litecoin</td><td> 0x30</td><td> 0xB0</td></tr>\n<tr><td>Namecoin</td><td> 0x34</td><td> 0xB4</td></tr>\n</table>\n\n\n\n### Use in the Browser\n\nClone the repo:\n\n    git clone https://github.com/cryptocoinjs/coinstring\n\nInstall Browserify\n\n    npm install -g browserify\n\nNav to repo:\n\n    cd coinstring\n\nInstall dependencies:\n\n    npm install\n\nRun browserify:\n\n    browserify --standalone coinstring < lib/coinstring.js > lib/coinstring.bundle.js\n\nYou can now drop `coinstring.bundle.js` in a `<script>` tag.\n\n\n\nReferences\n----------\n- http://procbits.com/2013/08/27/generating-a-bitcoin-address-with-javascript\n- http://brainwallet.org/\n\n\n\nLicense\n-------\n\n(MIT License)\n\n\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/cryptocoinjs/coinstring/issues"
  },
  "homepage": "https://github.com/cryptocoinjs/coinstring",
  "_id": "coinstring@0.2.0",
  "_shasum": "fa2820497bb9e35b7cfa116f048219ca6f3f348f",
  "_from": "coinstring@~0.2.0",
  "_resolved": "https://registry.npmjs.org/coinstring/-/coinstring-0.2.0.tgz"
}
